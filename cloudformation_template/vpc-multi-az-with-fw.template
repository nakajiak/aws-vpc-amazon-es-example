Description: "SIEM on Amazon ES: VPC, Mult AZ, ALB, Network Firewall to access from internet"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Configuration
        Parameters:
          - aesDomanName
          - tagNamePrefix
          - trustedNw1
          - trustedNw2
      - Label:
          default: VPC
        Parameters:
          - vpcName
          - vpcCidr
      - Label:
          default: Firewall Subnet 1
        Parameters:
          - subnetFw1Name
          - subnetFw1Cidr
          - subnetFw1Az
      - Label:
          default: Firewall Subnet 2 in another region
        Parameters:
          - subnetFw2Name
          - subnetFw2Cidr
          - subnetFw2Az
      - Label:
          default: Public Subnet 1 for ALB
        Parameters:
          - subnetPublic1Name
          - subnetPublic1Cidr
          - subnetPublic1Az
      - Label:
          default: Public Subnet 2 for ALB in another Region
        Parameters:
          - subnetPublic2Name
          - subnetPublic2Cidr
          - subnetPublic2Az
      - Label:
          default: Private Subnet 1 for Amazon ES
        Parameters:
          - subnetPrivate1Name
          - subnetPrivate1Cidr
          - subnetPrivate1Az
      - Label:
          default: Private Subnet 2 for Amazon ES
        Parameters:
          - subnetPrivate2Name
          - subnetPrivate2Cidr
          - subnetPrivate2Az
      - Label:
          default: Private Subnet 3 for Amazon ES
        Parameters:
          - subnetPrivate3Name
          - subnetPrivate3Cidr
          - subnetPrivate3Az
      - Label:
          default: Gateway
        Parameters:
          - igwName
      - Label:
          default: Application Load Balancer
        Parameters:
          - albName
          - tgName
          - sgAlbName
          - sslCert
      - Label:
          default: Network Firewall
        Parameters:
          - fwName
          - fwPolicyName
          - fwStateleeRuleGroupName
          - fwStateleeRuleGroupCapacity
      - Label:
          default: Route Table
        Parameters:
          - rtbIgwName
          - rtbfw1Name
          - rtbfw2Name
          - rtbPublic1Name
          - rtbPublic2Name
          - rtbPrivateName
Parameters:
  aesDomanName:
    Type: String
    Default: aes-siem
    Description: Amazon ES Doamin Name
  tagNamePrefix:
    Type: String
    Default: amazon-es-
    Description: Tag name prefix
  trustedNw1:
    Type: String
    Default: 192.0.2.0/24
    Description: Trusted Network Address 1
  trustedNw2:
    Type: String
    Default: 198.51.100.0/24
    Description: Trusted Network Address 2
  vpcName:
    Type: String
    Default: vpc
    Description: VPC tag name
  vpcCidr:
    Type: String
    Default: 192.168.0.0/16
    Description: VPC CIDR Block
  subnetPublic1Name:
    Type: String
    Default: subnet-public-1
    Description: Public Subnet 1 for ALB/NAT GW
  subnetPublic1Cidr:
    Type: String
    Default: 192.168.1.0/24
    Description: Public Subnet 1 CIDR Block
  subnetPublic1Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
    Description: Public Subnet 1 Availability Zone
  subnetPublic2Name:
    Type: String
    Default: subnet-public-2
    Description: Public Subnet 2 for ALB/NAT GW
  subnetPublic2Cidr:
    Type: String
    Default: 192.168.11.0/24
    Description: Public Subnet 2 CIDR Block
  subnetPublic2Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1c
    Description: Public Subnet 2 Availability Zone
  subnetPrivate1Name:
    Type: String
    Default: subnet-private-1
    Description: Private Subnet 1 for Amazon ES
  subnetPrivate1Cidr:
    Type: String
    Default: 192.168.2.0/24
    Description: Private Subnet 1 CIDR Block
  subnetPrivate1Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
    Description: Private Subnet 1 Availability Zone
  igwName:
    Type: String
    Default: igw
    Description: Internet Gateway Name
  albName:
    Type: String
    Default: alb
    Description: ALB Name
  sgAlbName:
    Type: String
    Default: sg-alb
    Description: Security Group Name For ALB
  tgName:
    Type: String
    Default: tg-aes
    Description: Target Grup Name for Amazon ES
  sslCert:
    Type: String
    AllowedPattern: ^arn:aws:acm:.*
    Description: Default SSL certificate from ACM for ALB. This must be ARN format. eg) arn:aws:acm:ap-northeast-1:123456789012:certificate/uuid1234-5678-aaaa-bbbb-ddddeeeeffff
    MinLength: 50
  rtbPublic1Name:
    Type: String
    Default: rtb-public-1
    Description: Public Route Table Name
  rtbPublic2Name:
    Type: String
    Default: rtb-public-2
    Description: Public Route Table Name
  rtbPrivateName:
    Type: String
    Default: rtb-private
    Description: Private Route Table Name
  subnetFw1Name:
    Type: String
    Default: subnet-fw-1
    Description: Firewall Subnet 1 for Network Firewall endpoint
  subnetFw1Cidr:
    Type: String
    Default: 192.168.0.0/24
    Description: Firewall Subnet 1 CIDR Block
  subnetFw1Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1a
    Description: Firewall Subnet 1 Availability Zone
  fwName:
    Type: String
    Default: fw
    Description: Network Firewall Name
  fwPolicyName:
    Type: String
    Default: fw-policy
    Description: Network Firewall Policy Name
  fwStateleeRuleGroupName:
    Type: String
    Default: stateless-rule-group
    Description: Netwok Firewall stateless rule group name to access Kibana
  fwStateleeRuleGroupCapacity:
    Type: Number
    Default: 1000
    Description: Netwok Firewall capacity for stateless rule group
  rtbIgwName:
    Type: String
    Default: rtb-igw
    Description: IGW Ingress Route Table Name
  rtbfw1Name:
    Type: String
    Default: rtb-fw-1
    Description: Route Table Name For Network Firewall 1
  rtbfw2Name:
    Type: String
    Default: rtb-fw-2
    Description: Route Table Name For Network Firewall
  subnetFw2Name:
    Type: String
    Default: subnet-fw-2
    Description: Firewall Subnet 2 for Network Firewall endpoint
  subnetFw2Cidr:
    Type: String
    Default: 192.168.10.0/24
    Description: Firewall Subnet 2 CIDR Block
  subnetFw2Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1c
    Description: Firewall Subnet 2 Availability Zone. Select another region
  subnetPrivate2Name:
    Type: String
    Default: subnet-private-2
    Description: Private Subnet 2 for Amazon ES
  subnetPrivate2Cidr:
    Type: String
    Default: 192.168.12.0/24
    Description: Private Subnet 2 CIDR Block
  subnetPrivate2Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1c
    Description: Private Subnet 2 Availability Zone
  subnetPrivate3Name:
    Type: String
    Default: subnet-private-3
    Description: Private Subnet 3 for Amazon ES
  subnetPrivate3Cidr:
    Type: String
    Default: 192.168.22.0/24
    Description: Private Subnet 3 CIDR Block
  subnetPrivate3Az:
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1d
    Description: Private Subnet 3 Availability Zone
Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: vpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: vpcName
  igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: igwName
  igwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: vpc
      InternetGatewayId:
        Ref: igw
  subnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetPublic1Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetPublic1Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetPublic1Name
  subnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetPublic2Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetPublic2Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetPublic2Name
  subnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetPrivate1Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetPrivate1Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetPrivate1Name
  rtbPublic1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbPublic1Name
  rtbPublic1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtbPublic1
      SubnetId:
        Ref: subnetPublic1
  rtbPublic2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbPublic2Name
  rtbPublic2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtbPublic2
      SubnetId:
        Ref: subnetPublic2
  rtbPriv:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbPrivateName
  rtbPrivAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtbPriv
      SubnetId:
        Ref: subnetPrivate1
  sgForALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG For application load balancer
      GroupName:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: sgAlbName
      SecurityGroupIngress:
        - CidrIp:
            Ref: trustedNw1
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp:
            Ref: trustedNw2
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp:
            Ref: vpcCidr
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - sg-trusted-nw
      VpcId:
        Ref: vpc
  configureALBalb8A37CDA0:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: albName
      Scheme: internet-facing
      SecurityGroups:
        - Ref: sgForALB
      Subnets:
        - Ref: subnetPublic1
        - Ref: subnetPublic2
      Type: application
  configureALBalbTg3AEA795B:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /_plugin/kibana/
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "302"
      Name:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: tgName
      Port: 443
      Protocol: HTTPS
      ProtocolVersion: HTTP1
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: vpc
  configureALBalbListenerF7E0CBB1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - FixedResponseConfig:
            MessageBody: Not found.
            StatusCode: "404"
          Type: fixed-response
      LoadBalancerArn:
        Ref: configureALBalb8A37CDA0
      Certificates:
        - CertificateArn:
            Ref: sslCert
      Port: 443
      Protocol: HTTPS
  configureALBalbListenerRuleD37DD813:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn:
            Ref: configureALBalbTg3AEA795B
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /_plugin/kibana*
      ListenerArn:
        Ref: configureALBalbListenerF7E0CBB1
      Priority: 10
  changeiplambdaUpdateTgServiceRole32E8EFDE:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  changeiplambdaUpdateTgServiceRoleDefaultPolicy4FB77B0B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInternetGateways
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - elasticloadbalancing:DescribeTargetHealth
            Effect: Allow
            Resource: "*"
          - Action:
              - elasticloadbalancing:DeregisterTargets
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:RegisterTargets
            Effect: Allow
            Resource:
              Ref: configureALBalbTg3AEA795B
        Version: "2012-10-17"
      PolicyName: changeiplambdaUpdateTgServiceRoleDefaultPolicy4FB77B0B
      Roles:
        - Ref: changeiplambdaUpdateTgServiceRole32E8EFDE
  changeiplambdaUpdateTg2D4D8CA8:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          
          import os
          import boto3

          aes_domain = os.environ['aes_domain']
          tg_arn = os.environ['tg_arn']
          ec2 = boto3.client('ec2')
          alb = boto3.client('elbv2')


          def get_aes_ips():
              res = ec2.describe_network_interfaces(
                  Filters=[{'Name': 'description', 'Values': [f'ES {aes_domain}']}])
              if res['NetworkInterfaces']:
                  ips = [ojb['PrivateIpAddress'] for ojb in res['NetworkInterfaces']]
                  print(f'ENI IP address for Amazon ES instances: {ips}')
                  return set(ips)
              return set([])

          def modify_target_ips(aes_ips):
              res = alb.describe_target_health(TargetGroupArn=tg_arn)
              registered_ips = set([])
              if res['TargetHealthDescriptions']:
                  registered_ips = set(
                      [ojb['Target']['Id'] for ojb in res['TargetHealthDescriptions']])
                  print(f'Registered IPs: {registered_ips}')
              for ip in (aes_ips - registered_ips):
                  response = alb.register_targets(
                      TargetGroupArn=tg_arn, Targets=[{'Id': ip, 'Port': 443}])
                  print(f'add {ip}, response: {response}')
              for ip in (registered_ips - aes_ips):
                  response = alb.deregister_targets(
                      TargetGroupArn=tg_arn, Targets=[{'Id': ip, 'Port': 443}])
                  print(f'delete {ip}, response: {response}')


          def lambda_handler(event, context):
              aes_ips = get_aes_ips()
              modify_target_ips(aes_ips)
      Role:
        Fn::GetAtt:
          - changeiplambdaUpdateTgServiceRole32E8EFDE
          - Arn
      Description: "Amazon ES: update ip address of target group for ALB"
      Environment:
        Variables:
          aes_domain:
            Ref: aesDomanName
          tg_arn:
            Ref: configureALBalbTg3AEA795B
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - update-tg-ips-for-alb
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 10
    DependsOn:
      - changeiplambdaUpdateTgServiceRoleDefaultPolicy4FB77B0B
      - changeiplambdaUpdateTgServiceRole32E8EFDE
  changeipeventBridgeRule1E6BFE1D:
    Type: AWS::Events::Rule
    Properties:
      Description: "Amazon ES: trigger lambda of update-tg-ips-for-alb"
      EventPattern:
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - CreateNetworkInterface
            - DeleteNetworkInterface
          sourceIPAddress:
            - es.amazonaws.com
        detail-type:
          - AWS API Call via CloudTrail
        source:
          - aws.ec2
      Name:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - trigger-update-tg-ips-for-alb
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - changeiplambdaUpdateTg2D4D8CA8
              - Arn
          Id: Target0
  changeipeventBridgeRuleAllowEventRulevpcmultiazwithfwchangeiplambdaUpdateTg9C4C5058BFE16AEC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - changeiplambdaUpdateTg2D4D8CA8
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - changeipeventBridgeRule1E6BFE1D
          - Arn
  subnetFw1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetFw1Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetFw1Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetFw1Name
  fwRuleGroupToAesFromInternet:
    Type: AWS::NetworkFirewall::RuleGroup
    Properties:
      Capacity:
        Ref: fwStateleeRuleGroupCapacity
      RuleGroupName:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: fwStateleeRuleGroupName
      Type: STATELESS
      Description: hoge
      RuleGroup:
        RulesSource:
          StatelessRulesAndCustomActions:
            StatelessRules:
              - Priority: 100
                RuleDefinition:
                  Actions:
                    - aws:pass
                  MatchAttributes:
                    DestinationPorts:
                      - FromPort: 443
                        ToPort: 443
                    Destinations:
                      - AddressDefinition: 0.0.0.0/0
                    Protocols:
                      - 6
                    SourcePorts:
                      - FromPort: 0
                        ToPort: 65535
                    Sources:
                      - AddressDefinition:
                          Ref: trustedNw1
                      - AddressDefinition:
                          Ref: trustedNw2
              - Priority: 101
                RuleDefinition:
                  Actions:
                    - aws:pass
                  MatchAttributes:
                    DestinationPorts:
                      - FromPort: 0
                        ToPort: 65535
                    Destinations:
                      - AddressDefinition:
                          Ref: trustedNw1
                      - AddressDefinition:
                          Ref: trustedNw2
                    Protocols:
                      - 6
                    SourcePorts:
                      - FromPort: 443
                        ToPort: 443
                    Sources:
                      - AddressDefinition: 0.0.0.0/0
  fwPolicy:
    Type: AWS::NetworkFirewall::FirewallPolicy
    Properties:
      FirewallPolicy:
        StatelessDefaultActions:
          - aws:drop
        StatelessFragmentDefaultActions:
          - aws:drop
        StatelessRuleGroupReferences:
          - Priority: 1
            ResourceArn:
              Fn::GetAtt:
                - fwRuleGroupToAesFromInternet
                - RuleGroupArn
      FirewallPolicyName:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: fwPolicyName
  fw:
    Type: AWS::NetworkFirewall::Firewall
    Properties:
      FirewallName:
        Fn::Join:
          - ""
          - - Ref: tagNamePrefix
            - Ref: fwName
      FirewallPolicyArn:
        Fn::GetAtt:
          - fwPolicy
          - FirewallPolicyArn
      SubnetMappings:
        - SubnetId:
            Ref: subnetFw1
        - SubnetId:
            Ref: subnetFw2
      VpcId:
        Ref: vpc
      DeleteProtection: false
      Description: "Amazon ES: Network Firewall"
      FirewallPolicyChangeProtection: false
      SubnetChangeProtection: false
  rtbIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbIgwName
  IgwRouteTableAssociation:
    Type: AWS::EC2::GatewayRouteTableAssociation
    Properties:
      GatewayId:
        Ref: igw
      RouteTableId:
        Ref: rtbIgw
  routeIgw1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbIgw
      DestinationCidrBlock:
        Ref: subnetPublic1Cidr
      VpcEndpointId:
        Fn::Select:
          - 1
          - Fn::Split:
              - ":"
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - fw
                      - EndpointIds
  routeIgw2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbIgw
      DestinationCidrBlock:
        Ref: subnetPublic2Cidr
      VpcEndpointId:
        Fn::Select:
          - 1
          - Fn::Split:
              - ":"
              - Fn::Select:
                  - 1
                  - Fn::GetAtt:
                      - fw
                      - EndpointIds
  rtbFw1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbfw1Name
  fwRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtbFw1
      SubnetId:
        Ref: subnetFw1
  routeFw1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbFw1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: igw
  routePublic1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbPublic1
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId:
        Fn::Select:
          - 1
          - Fn::Split:
              - ":"
              - Fn::Select:
                  - 0
                  - Fn::GetAtt:
                      - fw
                      - EndpointIds
  routePublic2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbPublic2
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId:
        Fn::Select:
          - 1
          - Fn::Split:
              - ":"
              - Fn::Select:
                  - 1
                  - Fn::GetAtt:
                      - fw
                      - EndpointIds
  subnetFw2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetFw2Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetFw2Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetFw2Name
  subnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetPrivate2Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetPrivate2Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetPrivate2Name
  subnetPrivate3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: subnetPrivate3Cidr
      VpcId:
        Ref: vpc
      AvailabilityZone:
        Ref: subnetPrivate3Az
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: subnetPrivate3Name
  rtbFw2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Ref: tagNamePrefix
                - Ref: rtbfw2Name
  fwRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtbFw2
      SubnetId:
        Ref: subnetFw2
  routeFw2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rtbFw2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: igw
Outputs:
  VPCID:
    Value:
      Ref: vpc
  SubnetIdPrivate1:
    Value:
      Ref: subnetPrivate1
  SubnetIdPrivate2:
    Value:
      Ref: subnetPrivate2
  SubnetIdPrivate3:
    Value:
      Ref: subnetPrivate3

